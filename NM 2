import os
import numpy as np
import paramiko
import torch as T
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as tt
from PIL import Image
from torch.distributions.categorical import Categorical
from datetime import date


def conv_block(in_channels, out_channels, pool=False):
    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
              nn.BatchNorm2d(out_channels),
              nn.ReLU(inplace=True)]
    if pool: layers.append(nn.MaxPool2d(2))
    return nn.Sequential(*layers)


def statetotensor(lis):
    j = [tensor.detach().numpy() for tensor in lis]
    return j


class PPOMemory:
    def __init__(self, batch_size):
        self.states = []
        self.probs = []
        self.vals = []
        self.actions = []
        self.rewards = []
        self.dones = []
        self.batch_size = batch_size

    def generate_batches(self):
        n_states = len(self.states)
        batch_start = np.arange(0, n_states, self.batch_size)
        indices = np.arange(n_states, dtype=np.int64)
        np.random.shuffle(indices)
        batches = [indices[i:i + self.batch_size] for i in batch_start]
        if isinstance(self.states[0], T.Tensor):
            self.states = statetotensor(self.states)
        return np.array(self.states), np.array(self.actions), np.array(self.probs), \
               np.array(self.vals), \
               np.array(self.rewards), \
               np.array(self.dones), \
               batches

    def store_memory(self, state, action, probs, vals, reward, done):
        self.states.append(state)
        self.actions.append(action)
        self.probs.append(probs)
        self.vals.append(vals)
        self.rewards.append(reward)
        self.dones.append(done)

    def clear_memory(self):
        self.states = []
        self.probs = []
        self.actions = []
        self.rewards = []
        self.dones = []
        self.vals = []


class ActorNetwork(nn.Module):
    def __init__(self, alpha):
        super(ActorNetwork, self).__init__()
        self.actor = nn.Sequential(
            conv_block(3, 8, pool=True),
            conv_block(8, 16, pool=True),
            nn.Sequential(conv_block(16, 16), conv_block(16, 16)),
            conv_block(16, 32, pool=True),
            conv_block(32, 64, pool=True),
            nn.Sequential(conv_block(64, 64), conv_block(64, 64)),
            conv_block(64, 128, pool=True),
            nn.Sequential(nn.MaxPool2d(4), nn.Flatten()),
            nn.Linear(768, 384),
            nn.ReLU(),
            nn.Linear(384, 192),
            nn.ReLU(),
            nn.Linear(192, 96),
            nn.ReLU(),
            nn.Linear(96, 48),
            nn.ReLU(),
            nn.Linear(48, 24),
            nn.ReLU(),
            nn.Linear(24, 12),
            nn.ReLU(),
            nn.Linear(12, 5),
            nn.Softmax(dim=-1)
        )
        self.optimizer = optim.Adam(self.parameters(), lr=alpha)
        self.device = T.device('cuda:0' if T.cuda.is_available() else 'cpu')
        self.to(self.device)

    def forward(self, state):
        dist = self.actor(state)
        dist = Categorical(dist)
        return dist


class CriticNetwork(nn.Module):
    def __init__(self, alpha):
        super(CriticNetwork, self).__init__()
        self.critic = nn.Sequential(
            conv_block(3, 8, pool=True),
            conv_block(8, 16, pool=True),
            nn.Sequential(conv_block(16, 16), conv_block(16, 16)),
            conv_block(16, 32, pool=True),
            conv_block(32, 64, pool=True),
            nn.Sequential(conv_block(64, 64), conv_block(64, 64)),
            conv_block(64, 128, pool=True),
            nn.Sequential(nn.MaxPool2d(4), nn.Flatten()),
            nn.Linear(768, 384),
            nn.ReLU(),
            nn.Linear(384, 192),
            nn.ReLU(),
            nn.Linear(192, 96),
            nn.ReLU(),
            nn.Linear(96, 48),
            nn.ReLU(),
            nn.Linear(48, 24),
            nn.ReLU(),
            nn.Linear(24, 12),
            nn.ReLU(),
            nn.Linear(12, 1)
        )
        self.optimizer = optim.Adam(self.parameters(), lr=alpha)
        self.device = T.device('cuda:0' if T.cuda.is_available() else 'cpu')
        self.to(self.device)

    def forward(self, state):
        value = self.critic(state)
        return value


class Agent:
    def __init__(self, gamma=0.99, alpha=0.0003, gae_lambda=0.95,
                 policy_clip=0.2, batch_size=10, n_epochs=50):
        self.gamma = gamma
        self.policy_clip = policy_clip
        self.n_epochs = n_epochs
        self.gae_lambda = gae_lambda
        self.actor = ActorNetwork(alpha)
        self.critic = CriticNetwork(alpha)
        # check which model you want to use
        self.actor.load_state_dict(T.load(r'C:\Users\Acer\PycharmProjects\NavigationModel\actor_2024-01-25.pth'))
        self.critic.load_state_dict(T.load(r'C:\Users\Acer\PycharmProjects\NavigationModel\critic_2024-01-25.pth'))
        self.actor.eval()
        self.critic.eval()
        self.memory = PPOMemory(batch_size)

    def remember(self, state, action, probs, vals, reward, done):
        self.memory.store_memory(state, action, probs, vals, reward, done)

    def choose_action(self, observation):
        dist = self.actor(observation)
        value = self.critic(observation)
        action = dist.sample()
        probs = T.squeeze(dist.log_prob(action)).item()
        action = T.squeeze(action).item()
        value = T.squeeze(value).item()
        return action, probs, value

    def learn(self):
        for _ in range(self.n_epochs):
            state_arr, action_arr, old_prob_arr, vals_arr, reward_arr, dones_arr, batches = self.memory.generate_batches()
            values = vals_arr
            advantage = np.zeros(len(reward_arr), dtype=np.float32)

            for t in range(len(reward_arr) - 1):
                discount = 1
                a_t = 0
                for k in range(t, len(reward_arr) - 1):
                    a_t += discount * (reward_arr[k] + self.gamma * values[k + 1] * (1 - int(dones_arr[k])) - values[k])
                    discount *= self.gamma * self.gae_lambda
                advantage[t] = a_t
            advantage = T.tensor(advantage).to(self.actor.device)

            values = T.tensor(values).to(self.actor.device)
            for batch in batches:
                states = T.tensor(state_arr[batch], dtype=T.float).to(self.actor.device)
                old_probs = T.tensor(old_prob_arr[batch]).to(self.actor.device)
                actions = T.tensor(action_arr[batch]).to(self.actor.device)

                dist = self.actor(states)
                critic_value = self.critic(states)

                critic_value = T.squeeze(critic_value)

                new_probs = dist.log_prob(actions)
                prob_ratio = new_probs.exp() / old_probs.exp()
                weighted_probs = advantage[batch] * prob_ratio
                weighted_clipped_probs = T.clamp(prob_ratio, 1 - self.policy_clip, 1 + self.policy_clip) * advantage[
                    batch]
                actor_loss = -T.min(weighted_probs, weighted_clipped_probs).mean()

                returns = advantage[batch] + values[batch]
                critic_loss = (returns - critic_value) ** 2
                critic_loss = critic_loss.mean()
                total_loss = actor_loss + 0.5 * critic_loss

                self.actor.optimizer.zero_grad()
                self.critic.optimizer.zero_grad()
                total_loss.backward()
                self.actor.optimizer.step()
                self.critic.optimizer.step()
                print(f"total loss: {total_loss} \n")
        self.memory.clear_memory()



def file_retriever():
    scp.get(r'/home/robot/test.jpg', r'C:\Users\Acer\PycharmProjects\NavigationModel\img.jpg')
    ssh.exec_command("rm test.jpg")
    img = Image.open('img.jpg')
    img = imgtotensor(img)
    img = img.unsqueeze(0)
    os.remove('img.jpg')
    return img


def raspido(action):
    actionmap = {
        0: "stay",
        1: "forward",
        2: "backward",
        3: "left",
        4: "right"
    }
    action_name = actionmap[action]
    command = f'sudo python3 /home/robot/major_project/{action_name}.py'
    stdin, stdout, stderr = ssh.exec_command(command)
    print(f'{stdout.read().decode("utf8")}')


def reward_m(reward):
    # this for reaching final
    if reward == 10:
        return 1, True
    # this for moving
    elif reward == 5:
        return 0.3, False
    # this one for exploring
    elif reward == 1:
        return 0.1, False
    # this for not moving
    elif reward == 0:
        return -0.1, False
    # this for bad move
    elif reward == 2:
        return -0.2, False
    # this for near wall, obstacle
    elif reward == 3:
        return -0.4, False
    # this for collision case
    elif reward == 4:
        return -0.8, False


def main():
    agent = Agent()
    N = 50
    n_steps = 0
    finish = False
    while not finish:
        track = str(input("Do you want to continue training: "))
        if track != "y":
            break
        raspido(0)
        observation = file_retriever()
        # check later if it is adequate
        count = 10 
        while count:
            fordis1 = tensortopil(observation.squeeze(0).clone())
            fordis1.save('first.jpg')
            action, prob, val = agent.choose_action(observation)
            raspido(action)
            observation_ = file_retriever()
            fordis2 = tensortopil(observation_.squeeze(0).clone())
            fordis2.save('second.jpg')
            value = int(input('Input reward for this action: '))
            os.remove("first.jpg")
            os.remove("second.jpg")
            reward, done = reward_m(value)
            n_steps += 1
            agent.remember(observation.squeeze(0), action, prob, val, reward, done)
            if n_steps % N == 0:
                agent.learn()
            count -= 1
            observation = observation_
    today = str(date.today())
    # save model as ractor and rcritic for red, bactor and bcritic for blue color navigation
    # they will be train only with their respective color block
    T.save(agent.actor.state_dict(), f"actor_{today}.pth")
    T.save(agent.critic.state_dict(), f"critic_{today}.pth")


# For SSH connection
pi_ip = '192.168.137.163'
pi_username = 'robot'
pi_password = 'robot'
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(pi_ip, username=pi_username, password=pi_password)
# For transfer
scp = paramiko.SFTPClient.from_transport(ssh.get_transport())
imgtotensor = tt.ToTensor()
tensortopil = tt.ToPILImage()

main()
