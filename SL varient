import os
import torch
from torch.utils.data import Dataset
from torchvision import transforms
from PIL import Image
import torch.nn as nn
import torch.nn.functional as F

class CustomImageDataset(Dataset):
    def __init__(self, data_dir, transform=None):
        self.data_dir = data_dir
        if data_dir == rf'E:\trainv2\forSL\f':
         i=0
        elif data_dir == rf'E:\trainv2\forSL\b':
         i=1
        elif data_dir == rf'E:\trainv2\forSL\l':
         i=2
        elif data_dir == rf'E:\trainv2\forSL\r':
         i=3
        self.transform = transform
        # Get a list of file names in the data directory.
        self.file_list = [filename for filename in os.listdir(data_dir) if filename.endswith('.jpg')]
        self.dataset = [[self.__getitem__((filename)), i] for filename in self.file_list]
    def __len__(self):
        return len(self.file_list)
    def __getitem__(self, idx):
        img_name = os.path.join(self.data_dir, idx)
        image = Image.open(img_name)
        if self.transform:
            image = self.transform(image)
        return image
    def append(self, CustomImageDataset):
      for value in CustomImageDataset.dataset:
        self.dataset.append(value)

transform = transforms.Compose([
    transforms.ToTensor()
])
path1 = rf'E:\trainv2\forSL\f'
path2 = rf'E:\trainv2\forSL\b'
path3 = rf'E:\trainv2\forSL\l'
path4 = rf'E:\trainv2\forSL\r'
custom_dataset = CustomImageDataset(path1, transform=transform) #transform=None to view image
custom_dataset2 = CustomImageDataset(path2, transform=transform)
custom_dataset3 = CustomImageDataset(path3, transform=transform)
custom_dataset4 = CustomImageDataset(path4, transform=transform)
custom_dataset.append(custom_dataset2)
custom_dataset.append(custom_dataset3)
custom_dataset.append(custom_dataset4)

val_size = 600
train_size = len(custom_dataset.dataset) - val_size
train_ds, val_ds = torch.utils.data.random_split(custom_dataset.dataset, [train_size, val_size])
train_dl = torch.utils.data.DataLoader(train_ds, batch_size=64, shuffle=True, num_workers=2, pin_memory=True)
valid_dl = torch.utils.data.DataLoader(val_ds, batch_size=64, shuffle=True, num_workers=2, pin_memory=True)

def accuracy(outputs, labels):
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(preds))

class ImageClassificationBase(nn.Module):
    def training_step(self, batch):
        images, labels = batch
        out = self(images)                  # Generate predictions
        loss = F.cross_entropy(out, labels) # Calculate loss
        return loss

    def validation_step(self, batch):
        images, labels = batch
        out = self(images)                    # Generate predictions
        loss = F.cross_entropy(out, labels)   # Calculate loss
        acc = accuracy(out, labels)           # Calculate accuracy
        return {'val_loss': loss.detach(), 'val_acc': acc}

    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}

    def epoch_end(self, epoch, result):
        print("Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_acc']))

def conv_block(in_channels, out_channels, pool=False):
    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
              nn.BatchNorm2d(out_channels),
              nn.ReLU(inplace=True)]
    if pool: layers.append(nn.MaxPool2d(2))
    return nn.Sequential(*layers)

class Resnet(ImageClassificationBase):
    def __init__(self):
        super().__init__()
        self.conv1 = conv_block(3, 8, pool=True)
        self.res1 = nn.Sequential(conv_block(8, 8), conv_block(8, 8))
        self.conv2 = conv_block(8, 16, pool=True)
        self.conv3 = conv_block(16, 32, pool=True)
        self.res2 = nn.Sequential(conv_block(32, 32), conv_block(32, 32))
        self.conv5 = conv_block(32, 64, pool=True)
        self.classifier = nn.Sequential(nn.MaxPool2d(2),
                                        nn.Flatten(),
                                        nn.Dropout(0.2))
        self.linear = nn.Sequential(
            nn.Linear(576, 128),
            nn.ReLU(),
            nn.Linear(128, 4)
        )
    def forward(self, xb):
        out = self.conv1(xb)
        out = self.res1(out) + out
        out = self.conv2(out)
        out = self.conv3(out)
        out = self.res2(out) + out
        out = self.conv5(out)
        out = self.classifier(out)
        out = self.linear(out)
        return out

model = Resnet()

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit_one_cycle(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

history = [evaluate(model, valid_dl)]
history

epochs = 10
max_lr = 0.01
grad_clip = 0.1
weight_decay = 1e-4
opt_func = torch.optim.Adam

history += fit_one_cycle(epochs, max_lr, model, train_dl, valid_dl,
                             grad_clip=grad_clip,
                             weight_decay=weight_decay,
                             opt_func=opt_func)

torch.save(model.state_dict(),"modelv3.pth")
